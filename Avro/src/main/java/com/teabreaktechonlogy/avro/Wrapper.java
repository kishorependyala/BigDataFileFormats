/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.teabreaktechonlogy.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Wrapper extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5823083035290335397L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Wrapper\",\"namespace\":\"com.teabreaktechonlogy.avro\",\"fields\":[{\"name\":\"intType\",\"type\":\"int\"},{\"name\":\"longType\",\"type\":\"long\"},{\"name\":\"doubleType\",\"type\":\"double\"},{\"name\":\"risk\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Risk\",\"fields\":[{\"name\":\"intType\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"longType\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"doubleType\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"stringType\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"arrayType\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int intType;
  @Deprecated public long longType;
  @Deprecated public double doubleType;
  @Deprecated public com.teabreaktechonlogy.avro.Risk risk;
  @Deprecated public java.util.List<java.lang.Integer> arrayType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Wrapper() {}

  /**
   * All-args constructor.
   * @param intType The new value for intType
   * @param longType The new value for longType
   * @param doubleType The new value for doubleType
   * @param risk The new value for risk
   * @param arrayType The new value for arrayType
   */
  public Wrapper(java.lang.Integer intType, java.lang.Long longType, java.lang.Double doubleType, com.teabreaktechonlogy.avro.Risk risk, java.util.List<java.lang.Integer> arrayType) {
    this.intType = intType;
    this.longType = longType;
    this.doubleType = doubleType;
    this.risk = risk;
    this.arrayType = arrayType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return intType;
    case 1: return longType;
    case 2: return doubleType;
    case 3: return risk;
    case 4: return arrayType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: intType = (java.lang.Integer)value$; break;
    case 1: longType = (java.lang.Long)value$; break;
    case 2: doubleType = (java.lang.Double)value$; break;
    case 3: risk = (com.teabreaktechonlogy.avro.Risk)value$; break;
    case 4: arrayType = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'intType' field.
   * @return The value of the 'intType' field.
   */
  public java.lang.Integer getIntType() {
    return intType;
  }

  /**
   * Sets the value of the 'intType' field.
   * @param value the value to set.
   */
  public void setIntType(java.lang.Integer value) {
    this.intType = value;
  }

  /**
   * Gets the value of the 'longType' field.
   * @return The value of the 'longType' field.
   */
  public java.lang.Long getLongType() {
    return longType;
  }

  /**
   * Sets the value of the 'longType' field.
   * @param value the value to set.
   */
  public void setLongType(java.lang.Long value) {
    this.longType = value;
  }

  /**
   * Gets the value of the 'doubleType' field.
   * @return The value of the 'doubleType' field.
   */
  public java.lang.Double getDoubleType() {
    return doubleType;
  }

  /**
   * Sets the value of the 'doubleType' field.
   * @param value the value to set.
   */
  public void setDoubleType(java.lang.Double value) {
    this.doubleType = value;
  }

  /**
   * Gets the value of the 'risk' field.
   * @return The value of the 'risk' field.
   */
  public com.teabreaktechonlogy.avro.Risk getRisk() {
    return risk;
  }

  /**
   * Sets the value of the 'risk' field.
   * @param value the value to set.
   */
  public void setRisk(com.teabreaktechonlogy.avro.Risk value) {
    this.risk = value;
  }

  /**
   * Gets the value of the 'arrayType' field.
   * @return The value of the 'arrayType' field.
   */
  public java.util.List<java.lang.Integer> getArrayType() {
    return arrayType;
  }

  /**
   * Sets the value of the 'arrayType' field.
   * @param value the value to set.
   */
  public void setArrayType(java.util.List<java.lang.Integer> value) {
    this.arrayType = value;
  }

  /**
   * Creates a new Wrapper RecordBuilder.
   * @return A new Wrapper RecordBuilder
   */
  public static com.teabreaktechonlogy.avro.Wrapper.Builder newBuilder() {
    return new com.teabreaktechonlogy.avro.Wrapper.Builder();
  }

  /**
   * Creates a new Wrapper RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Wrapper RecordBuilder
   */
  public static com.teabreaktechonlogy.avro.Wrapper.Builder newBuilder(com.teabreaktechonlogy.avro.Wrapper.Builder other) {
    return new com.teabreaktechonlogy.avro.Wrapper.Builder(other);
  }

  /**
   * Creates a new Wrapper RecordBuilder by copying an existing Wrapper instance.
   * @param other The existing instance to copy.
   * @return A new Wrapper RecordBuilder
   */
  public static com.teabreaktechonlogy.avro.Wrapper.Builder newBuilder(com.teabreaktechonlogy.avro.Wrapper other) {
    return new com.teabreaktechonlogy.avro.Wrapper.Builder(other);
  }

  /**
   * RecordBuilder for Wrapper instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Wrapper>
    implements org.apache.avro.data.RecordBuilder<Wrapper> {

    private int intType;
    private long longType;
    private double doubleType;
    private com.teabreaktechonlogy.avro.Risk risk;
    private com.teabreaktechonlogy.avro.Risk.Builder riskBuilder;
    private java.util.List<java.lang.Integer> arrayType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.teabreaktechonlogy.avro.Wrapper.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.intType)) {
        this.intType = data().deepCopy(fields()[0].schema(), other.intType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longType)) {
        this.longType = data().deepCopy(fields()[1].schema(), other.longType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doubleType)) {
        this.doubleType = data().deepCopy(fields()[2].schema(), other.doubleType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.risk)) {
        this.risk = data().deepCopy(fields()[3].schema(), other.risk);
        fieldSetFlags()[3] = true;
      }
      if (other.hasRiskBuilder()) {
        this.riskBuilder = com.teabreaktechonlogy.avro.Risk.newBuilder(other.getRiskBuilder());
      }
      if (isValidValue(fields()[4], other.arrayType)) {
        this.arrayType = data().deepCopy(fields()[4].schema(), other.arrayType);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Wrapper instance
     * @param other The existing instance to copy.
     */
    private Builder(com.teabreaktechonlogy.avro.Wrapper other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.intType)) {
        this.intType = data().deepCopy(fields()[0].schema(), other.intType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longType)) {
        this.longType = data().deepCopy(fields()[1].schema(), other.longType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doubleType)) {
        this.doubleType = data().deepCopy(fields()[2].schema(), other.doubleType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.risk)) {
        this.risk = data().deepCopy(fields()[3].schema(), other.risk);
        fieldSetFlags()[3] = true;
      }
      this.riskBuilder = null;
      if (isValidValue(fields()[4], other.arrayType)) {
        this.arrayType = data().deepCopy(fields()[4].schema(), other.arrayType);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'intType' field.
      * @return The value.
      */
    public java.lang.Integer getIntType() {
      return intType;
    }

    /**
      * Sets the value of the 'intType' field.
      * @param value The value of 'intType'.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder setIntType(int value) {
      validate(fields()[0], value);
      this.intType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'intType' field has been set.
      * @return True if the 'intType' field has been set, false otherwise.
      */
    public boolean hasIntType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'intType' field.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder clearIntType() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'longType' field.
      * @return The value.
      */
    public java.lang.Long getLongType() {
      return longType;
    }

    /**
      * Sets the value of the 'longType' field.
      * @param value The value of 'longType'.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder setLongType(long value) {
      validate(fields()[1], value);
      this.longType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'longType' field has been set.
      * @return True if the 'longType' field has been set, false otherwise.
      */
    public boolean hasLongType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'longType' field.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder clearLongType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'doubleType' field.
      * @return The value.
      */
    public java.lang.Double getDoubleType() {
      return doubleType;
    }

    /**
      * Sets the value of the 'doubleType' field.
      * @param value The value of 'doubleType'.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder setDoubleType(double value) {
      validate(fields()[2], value);
      this.doubleType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'doubleType' field has been set.
      * @return True if the 'doubleType' field has been set, false otherwise.
      */
    public boolean hasDoubleType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'doubleType' field.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder clearDoubleType() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'risk' field.
      * @return The value.
      */
    public com.teabreaktechonlogy.avro.Risk getRisk() {
      return risk;
    }

    /**
      * Sets the value of the 'risk' field.
      * @param value The value of 'risk'.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder setRisk(com.teabreaktechonlogy.avro.Risk value) {
      validate(fields()[3], value);
      this.riskBuilder = null;
      this.risk = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'risk' field has been set.
      * @return True if the 'risk' field has been set, false otherwise.
      */
    public boolean hasRisk() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'risk' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.teabreaktechonlogy.avro.Risk.Builder getRiskBuilder() {
      if (riskBuilder == null) {
        if (hasRisk()) {
          setRiskBuilder(com.teabreaktechonlogy.avro.Risk.newBuilder(risk));
        } else {
          setRiskBuilder(com.teabreaktechonlogy.avro.Risk.newBuilder());
        }
      }
      return riskBuilder;
    }

    /**
     * Sets the Builder instance for the 'risk' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.teabreaktechonlogy.avro.Wrapper.Builder setRiskBuilder(com.teabreaktechonlogy.avro.Risk.Builder value) {
      clearRisk();
      riskBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'risk' field has an active Builder instance
     * @return True if the 'risk' field has an active Builder instance
     */
    public boolean hasRiskBuilder() {
      return riskBuilder != null;
    }

    /**
      * Clears the value of the 'risk' field.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder clearRisk() {
      risk = null;
      riskBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrayType' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getArrayType() {
      return arrayType;
    }

    /**
      * Sets the value of the 'arrayType' field.
      * @param value The value of 'arrayType'.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder setArrayType(java.util.List<java.lang.Integer> value) {
      validate(fields()[4], value);
      this.arrayType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'arrayType' field has been set.
      * @return True if the 'arrayType' field has been set, false otherwise.
      */
    public boolean hasArrayType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'arrayType' field.
      * @return This builder.
      */
    public com.teabreaktechonlogy.avro.Wrapper.Builder clearArrayType() {
      arrayType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Wrapper build() {
      try {
        Wrapper record = new Wrapper();
        record.intType = fieldSetFlags()[0] ? this.intType : (java.lang.Integer) defaultValue(fields()[0]);
        record.longType = fieldSetFlags()[1] ? this.longType : (java.lang.Long) defaultValue(fields()[1]);
        record.doubleType = fieldSetFlags()[2] ? this.doubleType : (java.lang.Double) defaultValue(fields()[2]);
        if (riskBuilder != null) {
          record.risk = this.riskBuilder.build();
        } else {
          record.risk = fieldSetFlags()[3] ? this.risk : (com.teabreaktechonlogy.avro.Risk) defaultValue(fields()[3]);
        }
        record.arrayType = fieldSetFlags()[4] ? this.arrayType : (java.util.List<java.lang.Integer>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
